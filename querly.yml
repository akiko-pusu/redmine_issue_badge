rules:
  - id: akiko-pusu.redmine_plugins.enum_badge_order
    pattern: "IssueBadgeUserSetting.where(badge_order: _)"
    message: Please use enum scope rather than use where clouse. E.g. IssueBadgeSetting.oldest, IssueBadgeSetting.newest.
  - id: akiko-pusu.redmine_plugins.debug_print
    pattern:
      - self.p
      - self.pp
    message: Delete debug print
    examples:
      - before: |
          pp some: error
  - id: akiko-pusu.redmine_plugins.exception
    pattern: Exception
    message: |
      You probably should use StandardError

      If you are trying to define error class, inherit that from StandardError.
    justification:
      - You are sure you want to define an exception which is not rescued by default
    examples:
      - before: class MyError < Exception; end
        after: class MyError < StandardError; end
  - id: akiko-pusu.redmine_plugins.count
    pattern: count() !{}
    message: |
      Use size or length for count, if receiver is an array
    examples:
      - before: "[].count"
        after: "[].size"
      - after: "[].count(:x)"
      - after: "[].count {|x| x > 3 }"
  - id: akiko-pusu.redmine_plugins.test.assert_equal_size
    pattern:
      subject: "assert_equal(:int: as 'zero, _.'size, ...)"
      where:
        zero: 0
        size:
          - size
          - count
    message: |
      Comparing size of something with 0 can be written using assert_empty
    examples:
      - before: |
          assert_equal 0, some.size
        after: |
          assert_empty some.size
      - before: |
          assert_equal 0, some.count
        after: |
          assert_empty some.count
checks:
  - path: /
    rules:
      except: akiko-pusu.redmine_plugins.test
  - path: /test
    rules:
      add: akiko-pusu.redmine_plugins.test
